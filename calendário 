import React, { useMemo, useState } from "react"; import { CheckCircle, Clock, Rocket, LineChart, CalendarDays, Filter, Folder, RefreshCw } from "lucide-react"; import { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer, CartesianGrid } from "recharts";

// Tema CJTEC Azul Corporativo const theme = { primary: "#004AAD", secondary: "#007BFF", accent: "#00C2FF", bgLight: "#F8FAFF", textDark: "#1E293B", };

const statusStyles = { Concluido: { bg: "bg-green-50", text: "text-green-800", dot: "bg-green-500" }, Andamento: { bg: "bg-yellow-50", text: "text-yellow-800", dot: "bg-yellow-500" }, Preparacao: { bg: "bg-blue-50", text: "text-blue-800", dot: "bg-blue-500" }, Testes: { bg: "bg-orange-50", text: "text-orange-800", dot: "bg-orange-500" }, };

const prettyStatus = { Concluido: "Concluído", Andamento: "Em andamento", Preparacao: "Em preparação", Testes: "Fase de testes", };

function ProgressBar({ value }) { return ( <div className="w-full h-3 bg-gray-200 rounded-xl overflow-hidden"> <div className="h-full rounded-xl transition-all" style={{ width: ${value}%, background: linear-gradient(90deg, ${theme.primary}, ${theme.accent}) }} /> </div> ); }

const initialProjects = [ { id: 1, name: "Plano Empresarial e Financeiro", status: "Andamento", progress: 80, due: "2025-11-09", link: "https://chat.openai.com/c/estudo-financeiro-cjtec", actions: [ "Revisar gráficos e ajustes de inflação", "Inserir projeções mensais (5 anos)", "Gerar PDF corporativo com assinatura CJTEC", ], }, { id: 2, name: "Site Institucional CJTEC", status: "Preparacao", progress: 60, due: "2025-11-16", link: "https://chat.openai.com/c/site-cjtec", actions: [ "Revisar layout e azul corporativo", "Teste final no Netlify", "Publicar versão inicial", ], }, { id: 3, name: "Painel Financeiro e Investimentos", status: "Andamento", progress: 50, due: "2025-11-23", link: "https://chat.openai.com/c/painel-financeiro-cjtec", actions: [ "Adicionar projeções automáticas de lucro", "Metas mensais e comparativo", "Conectar simulações de investimentos", ], }, { id: 4, name: "Aplicativo de Controle Freelancer", status: "Testes", progress: 40, due: "2025-11-25", link: "https://chat.openai.com/c/app-freelancer-cjtec", actions: [ "Ajustar cálculos de horas e ganhos", "Testar exportação em planilha", "Publicar no GitHub Pages", ], }, { id: 5, name: "Estudos e Análises de Mercado", status: "Concluido", progress: 100, due: null, link: "https://chat.openai.com/c/analise-mercado-cjtec", actions: ["Referência para relatórios e plano estratégico"], }, ];

export default function DashboardCJTEC() { const [projects, setProjects] = useState(initialProjects); const [filter, setFilter] = useState(null);

const metrics = useMemo(() => { const total = projects.length; const done = projects.filter(p => p.progress === 100).length; const avg = Math.round(projects.reduce((a, b) => a + b.progress, 0) / total); const nextMilestone = projects.filter(p => p.due).sort((a, b) => (a.due > b.due ? 1 : -1))[0]; return { total, done, avg, nextMilestone }; }, [projects]);

const chartData = useMemo(() => projects.map(p => ({ name: p.name.split(" ")[0], progresso: p.progress })), [projects]); const visibleProjects = projects.filter(p => (filter ? p.status === filter : true));

return ( <div className="min-h-screen w-full p-6 md:p-10 bg-gradient-to-b from-[#E9F1FF] to-white text-slate-800"> {/* Header */} <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4 mb-8"> <div> <h1 className="text-3xl md:text-4xl font-bold tracking-tight text-[${theme.primary}]">CJTEC · Painel da Pasta “Trabalho”</h1> <p className="text-slate-500 mt-1">Acompanhamento de projetos – Novembro/2025</p> </div> <div className="flex items-center gap-2"> <button className="px-3 py-2 rounded-xl text-white flex items-center gap-2 shadow-md" style={{ background: theme.primary }} onClick={() => setProjects([...initialProjects])} > <RefreshCw size={16} /> Atualizar </button> <select className="px-3 py-2 rounded-xl bg-white shadow border border-slate-200" value={filter ?? ""} onChange={(e) => setFilter(e.target.value || null)} > <option value="">Todos os status</option> <option value="Andamento">Em andamento</option> <option value="Preparacao">Em preparação</option> <option value="Testes">Fase de testes</option> <option value="Concluido">Concluído</option> </select> </div> </div>

{/* KPI Cards */}
  <div className="grid md:grid-cols-4 gap-4 mb-8">
    {[
      { icon: Folder, label: "Projetos ativos", value: metrics.total },
      { icon: CheckCircle, label: "Concluídos", value: metrics.done },
      { icon: LineChart, label: "Progresso médio", value: `${metrics.avg}%` },
      { icon: CalendarDays, label: "Próximo marco", value: metrics.nextMilestone ? `${new Date(metrics.nextMilestone.due).toLocaleDateString('pt-BR')} · ${metrics.nextMilestone.name}` : '—' },
    ].map((item, i) => (
      <div key={i} className="p-5 bg-white rounded-2xl shadow border border-slate-100 flex items-center gap-3">
        <item.icon className="text-blue-700" />
        <div>
          <p className="text-xs text-slate-500">{item.label}</p>
          <p className="text-xl font-semibold text-[${theme.textDark}]">{item.value}</p>
        </div>
      </div>
    ))}
  </div>

  {/* Chart */}
  <div className="bg-white rounded-2xl shadow border border-slate-100 p-5 mb-8">
    <h2 className="text-lg font-semibold mb-4 text-[${theme.primary}]">Progresso por projeto</h2>
    <div className="w-full h-64">
      <ResponsiveContainer width="100%" height="100%">
        <BarChart data={chartData}>
          <CartesianGrid strokeDasharray="3 3" />
          <XAxis dataKey="name" />
          <YAxis domain={[0, 100]} />
          <Tooltip />
          <Bar dataKey="progresso" fill={theme.primary} radius={[8, 8, 0, 0]} />
        </BarChart>
      </ResponsiveContainer>
    </div>
  </div>

  {/* Project List */}
  <div className="grid lg:grid-cols-2 gap-4">
    {visibleProjects.map((p) => {
      const style = statusStyles[p.status];
      return (
        <div key={p.id} className={`rounded-2xl border border-slate-100 shadow-sm ${style.bg}`}>
          <div className="p-5 flex items-start gap-3">
            <div className={`w-3 h-3 rounded-full mt-1.5 ${style.dot}`} />
            <div className="flex-1">
              <div className="flex items-center justify-between">
                <a href={p.link} target="_blank" className={`text-base md:text-lg font-semibold ${style.text} hover:underline`}>{p.name}</a>
                <span className={`text-xs px-2 py-1 rounded-lg ${style.bg} ${style.text}`}>{prettyStatus[p.status]}</span>
              </div>
              <ProgressBar value={p.progress} />
              <div className="flex justify-between mt-2 text-xs text-slate-500">
                <span>Progresso: <b className="text-slate-700">{p.progress}%</b></span>
                <span className="flex items-center gap-1"><Clock size={14} />{p.due ? new Date(p.due).toLocaleDateString('pt-BR') : 'Sem prazo'}</span>
              </div>
              <ul className="mt-3 text-sm list-disc pl-5 text-slate-700">
                {p.actions.map((a, i) => (<li key={i}>{a}</li>))}
              </ul>
            </div>
          </div>
        </div>
      );
    })}
  </div>

  <p className="text-center text-xs text-slate-400 mt-10">CJTEC · Painel Azul Corporativo · Novembro/2025</p>
</div>

); }